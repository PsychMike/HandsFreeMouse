<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="get_tween_8m" kind="file">
    <compoundname>getTween.m</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="get_tween_8m_1a9b9b2b260387b1220b952981823a8fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>mlhsSubst&lt; mlhsInnerSubst&lt; matlabtypesubstitute, y &gt;,mlhsInnerSubst&lt; matlabtypesubstitute, n &gt; &gt;</type>
        <definition>mlhsSubst&lt; mlhsInnerSubst&lt; matlabtypesubstitute, y &gt;,mlhsInnerSubst&lt; matlabtypesubstitute, n &gt; &gt; getTween</definition>
        <argsstring>(matlabtypesubstitute val1, matlabtypesubstitute val2, matlabtypesubstitute d, matlabtypesubstitute Fr, matlabtypesubstitute func, matlabtypesubstitute N)</argsstring>
        <name>getTween</name>
        <param>
          <type>matlabtypesubstitute</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>matlabtypesubstitute</type>
          <declname>val2</declname>
        </param>
        <param>
          <type>matlabtypesubstitute</type>
          <declname>d</declname>
        </param>
        <param>
          <type>matlabtypesubstitute</type>
          <declname>Fr</declname>
        </param>
        <param>
          <type>matlabtypesubstitute</type>
          <declname>func</declname>
        </param>
        <param>
          <type>matlabtypesubstitute</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Interpolates between two known points, val1 and val2 based on a specified function, with steps according to a given duration &amp; framerate. </para>        </briefdescription>
        <detaileddescription>
<para>Skips val1/start point. Always ends at val2. Valid functions: linear, exp, exp10, log, log10, norm</para><para>Returns column vector(s) of points <verbatim>val1    Start value
val2    End value
d       duration (seconds, or if Framerate not specified then &lt;tt&gt;d&lt;/tt&gt; will assumed to be the number of frames)
Fr      frame rate
func    function type: exp, exp10, log, log10, norm, inorm, sin
N       ???
</verbatim></para><para><simplesect kind="par"><title>EXAMPLE1</title><para>start_coords = [1 4]; end_coords = [8 7];</para></simplesect>
close all figure(); hold on plot([start_coords(1) end_coords(1)],[start_coords(2) end_coords(2)],<computeroutput>-</computeroutput>);</para><para>tween = getTween(start_coords,end_coords,1,30,<computeroutput>inorm</computeroutput>); plot(tween(:,1),tween(:,2),<computeroutput>ro</computeroutput>);</para><para><simplesect kind="par"><title>EXAMPLE2</title><para>shift right, spin round 4 times and fadeout tween = getTween([100 10 0 0],[500 10 360*4 1],1,30,<computeroutput>log</computeroutput>) x = tween(:,1); y = tween(:,2); rot = tween(:,3); alpha = tween(:,4);</para></simplesect>
Copyright 2014 : P R Jones <hruler/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Dropbox/MatlabToolkits/ivis/src/ivis_util/getTween.m" line="17" bodyfile="D:/Dropbox/MatlabToolkits/ivis/src/ivis_util/getTween.m" bodystart="17" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interpolates between two known points, val1 and val2 based on a specified function, with steps according to a given duration &amp; framerate. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(Autoinserted<sp/>by<sp/>mtoc++)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>has<sp/>been<sp/>filtered<sp/>by<sp/>the<sp/>mtoc++<sp/>executable,</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>which<sp/>generates<sp/>code<sp/>that<sp/>can<sp/>be<sp/>processed<sp/>by<sp/>the<sp/>doxygen<sp/>documentation<sp/>tool.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>On<sp/>the<sp/>other<sp/>hand,<sp/>it<sp/>can<sp/>neither<sp/>be<sp/>interpreted<sp/>by<sp/>MATLAB,<sp/>nor<sp/>can<sp/>it<sp/>be<sp/>compiled<sp/>with<sp/>a<sp/>C++<sp/>compiler.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Except<sp/>for<sp/>the<sp/>comments,<sp/>the<sp/>function<sp/>bodies<sp/>of<sp/>your<sp/>M-file<sp/>functions<sp/>are<sp/>untouched.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Consequently,<sp/>the<sp/>FILTER_SOURCE_FILES<sp/>doxygen<sp/>switch<sp/>(default<sp/>in<sp/>our<sp/>Doxyfile.template)<sp/>will<sp/>produce</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>attached<sp/>source<sp/>files<sp/>that<sp/>are<sp/>highly<sp/>readable<sp/>by<sp/>humans.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Additionally,<sp/>links<sp/>in<sp/>the<sp/>doxygen<sp/>generated<sp/>documentation<sp/>to<sp/>the<sp/>source<sp/>code<sp/>of<sp/>functions<sp/>and<sp/>class<sp/>members<sp/>refer<sp/>to</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>the<sp/>correct<sp/>locations<sp/>in<sp/>the<sp/>source<sp/>code<sp/>browser.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>However,<sp/>the<sp/>line<sp/>numbers<sp/>most<sp/>likely<sp/>do<sp/>not<sp/>correspond<sp/>to<sp/>the<sp/>line<sp/>numbers<sp/>in<sp/>the<sp/>original<sp/>MATLAB<sp/>source<sp/>files.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="get_tween_8m_1a9b9b2b260387b1220b952981823a8fba" refkind="member"><highlight class="normal">mlhsSubst&lt;mlhsInnerSubst&lt;matlabtypesubstitute,y&gt;<sp/>,mlhsInnerSubst&lt;matlabtypesubstitute,n&gt;<sp/>&gt;<sp/><ref refid="get_tween_8m_1a9b9b2b260387b1220b952981823a8fba" kindref="member" tooltip="Interpolates between two known points, val1 and val2 based on a specified function, with steps according to a given duration &amp;amp; framerate.">getTween</ref>(matlabtypesubstitute<sp/>val1,matlabtypesubstitute<sp/>val2,matlabtypesubstitute<sp/>d,matlabtypesubstitute<sp/>Fr,matlabtypesubstitute<sp/>func,matlabtypesubstitute<sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>%<sp/>1<sp/>Parse<sp/>inputs</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>check<sp/>for<sp/>equal<sp/>row-vectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>size(val1,1)<sp/>&gt;<sp/>1</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1<sp/>=<sp/>val1^t;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val2<sp/>=<sp/>val2^t;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>~all(size(val1)<sp/>==<sp/>size(val2))</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;<sp/>getTween:invalidInput<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>val1<sp/>and<sp/>val2<sp/>must<sp/>have<sp/>common<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nargin<sp/>&lt;<sp/>4<sp/>||<sp/>isempty(Fr)<sp/></highlight><highlight class="comment">/*<sp/><sp/>if<sp/>Framerate<sp/>not<sp/>specified<sp/>then<sp/>&apos;d&apos;<sp/>will<sp/>assumed<sp/>to<sp/>be<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>floor(Fr<sp/>*<sp/>d);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>n<sp/>&lt;<sp/>1</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;<sp/>getTween:invalidInput<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>n<sp/>must<sp/>be<sp/>&gt;<sp/>0<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nargin<sp/>&lt;<sp/>5<sp/>||<sp/>isempty(func)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>linear<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>%<sp/>2<sp/>Get<sp/>interpolation<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>startPoint<sp/>=<sp/>min(.0001,1/n);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>endPoint<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>lower(func)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>linear<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>linspace(startPoint,endPoint,n+1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>exp<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>exp(linspace(log(startPoint),log(endPoint),n+1));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>exp10<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/><sp/>=<sp/>exp10(linspace(log10(startPoint),log10(endPoint),n+1));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>log<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/><sp/>=<sp/>log(linspace(exp(startPoint),exp(endPoint),n+1));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>log10<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/><sp/>more<sp/>pronounced<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/><sp/>=<sp/>log10(linspace(exp10(startPoint),exp10(endPoint),n+1));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>norm<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>normcdf(linspace(norminv(startPoint),norminv(endPoint-startPoint),n+1),0,1);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>inorm<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>norminv(linspace(startPoint,endPoint-startPoint,n+1),0,1);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(tmp<sp/>+<sp/>max(tmp))<sp/>/<sp/>(max(tmp)*2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>sin<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(0:n)<sp/>/<sp/>Fr;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>time<sp/>vector<sp/>[sound<sp/>data<sp/>preparation]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf<sp/>=<sp/>N;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>sin(2<sp/>*<sp/>pi<sp/>*<sp/>cf<sp/>*<sp/>t<sp/>+<sp/>0);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherwise</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;<sp/>getTween:UnknownMethod<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>%s<sp/>is<sp/>an<sp/>invalid<sp/>function.\nFunction<sp/>type<sp/>must<sp/>be<sp/>one<sp/>of:<sp/>%s<sp/>&quot;</highlight><highlight class="normal">,func,strjoin1(</highlight><highlight class="stringliteral">&quot;<sp/>,<sp/><sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>linear<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>exp<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>exp10<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>log<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>log10<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>norm<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>inorm<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>remove<sp/>first<sp/>and<sp/>ensure<sp/>converges<sp/>at<sp/>1<sp/>(e.g.<sp/>for<sp/>continuous</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>distributions<sp/>such<sp/>as<sp/>norm)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>i(1)<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>i(end)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>%<sp/>3<sp/>Apply<sp/>interpolation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>strcmpi(func,</highlight><highlight class="stringliteral">&quot;<sp/>sin<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(val2+val1)/2<sp/>+<sp/>i^t*diff([val1,val2])/2;<sp/></highlight><highlight class="comment">/*<sp/><sp/>works<sp/>a<sp/>bit<sp/>differently<sp/>to<sp/>others.<sp/>oscillates<sp/>between<sp/>val1<sp/>and<sp/>val2,<sp/>N<sp/>times<sp/>per<sp/>second<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>repmat(i^t,1,size(val1,2));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1<sp/>=<sp/>repmat(val1,n,1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val2<sp/>=<sp/>repmat(val2,n,1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>val1.*(1-i)<sp/>+<sp/>val2.*i;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>length(y);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">end</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/Dropbox/MatlabToolkits/ivis/src/ivis_util/getTween.m"/>
  </compounddef>
</doxygen>
